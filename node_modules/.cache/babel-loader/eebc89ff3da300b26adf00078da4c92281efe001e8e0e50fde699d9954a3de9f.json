{"ast":null,"code":"import API_ENDPOINTS from \"../config/api-config\";\nimport ConnectedAccount from \"../models/ConnectedAccount\";\nimport cookieServiceInstance from \"./cookies\";\nimport library from \"../helpers/library\";\nexport default class ApiAccess {\n  static getStudents() {\n    return fetch(API_ENDPOINTS.studentList).then(response => {\n      if (!response.ok) {\n        throw new Error('Failed to fetch students');\n      }\n      return response.json();\n    }).catch(error => {\n      console.error('Error fetching students:', error);\n      return []; // Return a default value (empty array) in case of error\n    });\n  }\n  static login(credentials) {\n    return fetch(API_ENDPOINTS.login, {\n      method: 'POST',\n      body: JSON.stringify(credentials),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => console.error(error));\n  }\n  static logout() {\n    if (!ConnectedAccount.authToken) {\n      return Promise.reject(new Error('No authentication token provided'));\n    }\n    return fetch(API_ENDPOINTS.logout, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${ConnectedAccount.authToken}`\n      }\n    }).then(response => {\n      cookieServiceInstance.removeCookie(library.account);\n      cookieServiceInstance.removeCookie(library.token);\n      return response.json();\n    }).catch(error => console.error(error));\n  }\n  static saveStudent(student) {\n    if (!ConnectedAccount.authToken) {\n      return Promise.reject(new Error('No authentication token provided'));\n    }\n    return fetch(API_ENDPOINTS.saveStudent, {\n      method: 'POST',\n      body: JSON.stringify(student),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${ConnectedAccount.authToken}`\n      }\n    }).then(response => response.json()).catch(error => console.error(error));\n  }\n  static clearBase() {\n    if (!ConnectedAccount.authToken) {\n      return Promise.reject(new Error('No authentication token provided'));\n    }\n    return fetch(API_ENDPOINTS.clearBase, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${ConnectedAccount.authToken}`\n      }\n    }).then(response => response.json()).catch(error => console.error(error));\n  }\n  static deleteStudent(student) {\n    if (!ConnectedAccount.authToken) {\n      return Promise.reject(new Error('No authentication token provided'));\n    }\n    return fetch(API_ENDPOINTS.deleteStudent + student.id, {\n      method: 'DELETE',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${ConnectedAccount.authToken}`\n      }\n    }).then(reponse => reponse.json()).catch(error => console.error(error));\n  }\n  static getAccountList() {\n    if (!ConnectedAccount.authToken) {\n      return Promise.reject(new Error('No authentication token provided'));\n    }\n    return fetch(API_ENDPOINTS.accountList, {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${ConnectedAccount.authToken}`\n      }\n    }).then(response => response.json()).catch(error => console.error(error));\n  }\n  static saveAccount(account) {\n    return fetch(API_ENDPOINTS.saveAccount, {\n      method: 'POST',\n      body: JSON.stringify(account),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    }).then(response => response.json()).catch(error => console.error(error));\n  }\n  static editAccount(account) {\n    if (!ConnectedAccount.authToken) {\n      return Promise.reject(new Error('No authentication token provided'));\n    }\n    return fetch(API_ENDPOINTS.editAccount, {\n      method: 'POST',\n      body: JSON.stringify(account),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${ConnectedAccount.authToken}`\n      }\n    }).then(response => response.json()).catch(error => console.error(error));\n  }\n  static deleteAccount(account) {\n    return fetch(API_ENDPOINTS.deleteAccount + account.id, {\n      method: 'DELETE',\n      body: JSON.stringify(account),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${ConnectedAccount.authToken}`\n      }\n    }).then(response => response.json()).catch(error => console.error(error));\n  }\n  static changeRole(idRole) {\n    if (!ConnectedAccount.authToken) {\n      return Promise.reject(new Error('No authentication token provided'));\n    }\n    return fetch(API_ENDPOINTS.changeRole, {\n      method: 'DELETE',\n      body: JSON.stringify(idRole),\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${ConnectedAccount.authToken}`\n      }\n    }).then(response => response.json()).catch(error => console.error(error));\n  }\n}","map":{"version":3,"names":["API_ENDPOINTS","ConnectedAccount","cookieServiceInstance","library","ApiAccess","getStudents","fetch","studentList","then","response","ok","Error","json","catch","error","console","login","credentials","method","body","JSON","stringify","headers","logout","authToken","Promise","reject","removeCookie","account","token","saveStudent","student","clearBase","deleteStudent","id","reponse","getAccountList","accountList","saveAccount","editAccount","deleteAccount","changeRole","idRole"],"sources":["C:/Users/GODINGEN MARIE/Documents/student-app-react/src/services/api-access.ts"],"sourcesContent":["import Student from \"../models/Student\";\r\nimport API_ENDPOINTS from \"../config/api-config\";\r\nimport Account from \"../models/Account\";\r\nimport AccountResponse from \"../models/AccountResponse\";\r\nimport Credentials from \"../models/Credentials\";\r\nimport ConnectedAccount from \"../models/ConnectedAccount\";\r\nimport cookieServiceInstance from \"./cookies\";\r\nimport library from \"../helpers/library\";\r\n\r\nexport default class ApiAccess {\r\n\r\n    static getStudents(): Promise<Student[]> {\r\n        return fetch(API_ENDPOINTS.studentList)\r\n            .then(response => {\r\n                if (!response.ok) {\r\n                    throw new Error('Failed to fetch students');\r\n                }\r\n                return response.json();\r\n            })\r\n            .catch(error => {\r\n                console.error('Error fetching students:', error);\r\n                return []; // Return a default value (empty array) in case of error\r\n            });\r\n    }\r\n\r\n    static login(credentials: Credentials): Promise<AccountResponse> {\r\n        return fetch(API_ENDPOINTS.login, {\r\n            method: 'POST',\r\n            body: JSON.stringify(credentials),\r\n            headers: { 'Content-Type': 'application/json' }\r\n        })\r\n            .then(response => response.json())\r\n            .catch(error => console.error(error))\r\n    }\r\n\r\n    static logout(): Promise<null> {\r\n        if (!ConnectedAccount.authToken) {\r\n            return Promise.reject(new Error('No authentication token provided'));\r\n        }\r\n\r\n        return fetch(API_ENDPOINTS.logout, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${ConnectedAccount.authToken}`\r\n            }\r\n        })\r\n            .then(response => {\r\n                cookieServiceInstance.removeCookie(library.account);\r\n                cookieServiceInstance.removeCookie(library.token);\r\n                return response.json();\r\n            })\r\n            .catch(error => console.error(error));\r\n    }\r\n\r\n    static saveStudent(student: Student): Promise<Student> {\r\n        if (!ConnectedAccount.authToken) {\r\n            return Promise.reject(new Error('No authentication token provided'));\r\n        }\r\n\r\n        return fetch(API_ENDPOINTS.saveStudent, {\r\n            method: 'POST',\r\n            body: JSON.stringify(student),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${ConnectedAccount.authToken}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .catch(error => console.error(error));\r\n    }\r\n\r\n    static clearBase(): Promise<null> {\r\n        if (!ConnectedAccount.authToken) {\r\n            return Promise.reject(new Error('No authentication token provided'));\r\n        }\r\n\r\n        return fetch(API_ENDPOINTS.clearBase, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${ConnectedAccount.authToken}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .catch(error => console.error(error));\r\n    }\r\n\r\n    static deleteStudent(student: Student): Promise<null> {\r\n        if (!ConnectedAccount.authToken) {\r\n            return Promise.reject(new Error('No authentication token provided'));\r\n        }\r\n\r\n        return fetch(API_ENDPOINTS.deleteStudent + student.id, {\r\n            method: 'DELETE',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${ConnectedAccount.authToken}`\r\n            }\r\n        })\r\n            .then(reponse => reponse.json())\r\n            .catch(error => console.error(error));\r\n    }\r\n\r\n    static getAccountList(): Promise<Account[]> {\r\n        if (!ConnectedAccount.authToken) {\r\n            return Promise.reject(new Error('No authentication token provided'));\r\n        }\r\n\r\n        return fetch(API_ENDPOINTS.accountList, {\r\n            method: 'GET',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${ConnectedAccount.authToken}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .catch(error => console.error(error));\r\n    }\r\n\r\n    static saveAccount(account: Account): Promise<AccountResponse> {\r\n        return fetch(API_ENDPOINTS.saveAccount, {\r\n            method: 'POST',\r\n            body: JSON.stringify(account),\r\n            headers: { 'Content-Type': 'application/json' }\r\n        })\r\n            .then(response => response.json())\r\n            .catch(error => console.error(error));\r\n    }\r\n\r\n    static editAccount(account: Account): Promise<Account> {\r\n        if (!ConnectedAccount.authToken) {\r\n            return Promise.reject(new Error('No authentication token provided'));\r\n        }\r\n\r\n        return fetch(API_ENDPOINTS.editAccount, {\r\n            method: 'POST',\r\n            body: JSON.stringify(account),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${ConnectedAccount.authToken}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .catch(error => console.error(error));\r\n    }\r\n\r\n    static deleteAccount(account: Account): Promise<null> {\r\n        return fetch(API_ENDPOINTS.deleteAccount + account.id, {\r\n            method: 'DELETE',\r\n            body: JSON.stringify(account),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${ConnectedAccount.authToken}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .catch(error => console.error(error));\r\n    }\r\n\r\n    static changeRole(idRole: string[]): Promise<string> {\r\n        if (!ConnectedAccount.authToken) {\r\n            return Promise.reject(new Error('No authentication token provided'));\r\n        }\r\n\r\n        return fetch(API_ENDPOINTS.changeRole, {\r\n            method: 'DELETE',\r\n            body: JSON.stringify(idRole),\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': `Bearer ${ConnectedAccount.authToken}`\r\n            }\r\n        })\r\n            .then(response => response.json())\r\n            .catch(error => console.error(error));\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}